@model CheckoutBillingAddressModel
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address">
            <p class="selector">
                <div class="custom-control custom-checkbox mr-sm-0 mb-sm-0 mb-0">
                    <input asp-for="ShipToSameAddress" class="custom-control-input form-control" />
                    <label asp-for="ShipToSameAddress" class="custom-control-label fw600">@T("Checkout.ShipToSameAddress")</label>
                </div>
            </p>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="section select-billing-address">
            <label class="fw600" for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            <div class="row">
                <div class="col-md-12">
                    <select name="billing_address_id" id="billing-address-select" class="address-select form-control custom-select" title="" onchange="Billing.newAddress(!this.value)">
                        @foreach (var address in Model.ExistingAddresses)
                        {
                            var addressLine = "";
                            addressLine += address.FirstName;
                            addressLine += " " + address.LastName;
                            if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                            {
                                addressLine += ", " + address.Address1;
                            }
                            if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                            {
                                addressLine += ", " + address.City;
                            }
                            if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                            {
                                addressLine += ", " + address.County;
                            }
                            if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                            {
                                addressLine += ", " + address.StateProvinceName;
                            }
                            if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                            {
                                addressLine += " " + address.ZipPostalCode;
                            }
                            if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                            {
                                addressLine += ", " + address.CountryName;
                            }
                            //how should we render "FormattedCustomAddressAttributes" here?
                            <option value="@(address.Id)">@(addressLine)</option>
                        }
                        <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                    </select>
                </div>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })
    <div class="section new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error alert alert-danger"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })
</div>
