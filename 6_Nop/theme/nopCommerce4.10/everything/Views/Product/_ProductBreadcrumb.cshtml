@model ProductDetailsModel.ProductBreadcrumbModel
@using Nop.Core.Domain.Common
@inject CommonSettings commonSettings
@{
    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
<div class="breadcrumb-view">
<div class="container">
@if (Model.Enabled)
{
    <ul class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBreadcrumbBefore, additionalData = Model })
        <li class="breadcrumb-item">
            <span>
                <a href="@Url.RouteUrl("HomePage")">
                    <span>@T("Products.Breadcrumb.Top")</span>
                </a>
            </span>
        </li>
        @{ int position = 1; }
        @foreach (var category in Model.CategoryBreadcrumb)
        {
            <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem" class="breadcrumb-item">
                <span itemscope itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a href="@Url.RouteUrl("Category", new { SeName = category.SeName })" itemprop="item">
                        <span itemprop="name">@category.Name</span>
                    </a>
                </span>
                <meta itemprop="position" content="@position" />
            </li>
            position++;
        }
        <li class="breadcrumb-item active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            <strong class="current-item" itemprop="name">@Model.ProductName</strong>
            <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                <link itemprop="url" href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">
            </span>
            <meta itemprop="position" content="@position" />
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBreadcrumbAfter, additionalData = Model })
        </li>
    </ul>
}
</div>
</div>