@model CatalogPagingFilteringModel

<div class="product-selectors clearfix">
    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
                <div class="product-span">
                    <span>@T("Catalog.ViewMode")</span>
                </div>
                @if (Model.AvailableViewModes.Count > 1)
                {
                    var gridMode = Model.AvailableViewModes[0];
                    var listMode = Model.AvailableViewModes[1];
                    
                        <a class="viewmode-icon grid @if(gridMode.Selected){<text>selected</text>}" href="@gridMode.Value" title="@gridMode.Text"><i class="fa fa-th-large"></i>@*@gridMode.Text*@</a>
                        <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" href="@listMode.Value" title="@listMode.Text"><i class="fa  fa-th-list"></i>@*@listMode.Text*@</a>
                    
                }
        </div>
    }
    @*sorting*@
    @if (Model.AllowProductSorting)
    {
        <div class="product-sorting">                
            <span>@T("Catalog.OrderBy")</span>                
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { @class="form-control dropdown-filter", onchange = "setLocation(this.value);" })                
        </div>
    }
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <span>@T("Catalog.PageSize")</span>                
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { @class = "form-control dropdown-filter", onchange = "setLocation(this.value);" })
            <label>@T("Catalog.PageSize.PerPage")</label>
        </div>
    }
    
</div>