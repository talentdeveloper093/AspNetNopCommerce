@model HeaderLinksModel
@using System.Text.Encodings.Web
<div class="header-links">
    <ul class="nav navbar-nav navbar-right">
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_links_before" })
        @await Component.InvokeAsync("AdminHeaderLinks")
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account"><i class="fa fa-user"></i> @T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout"><i class="fa fa-unlock"></i> @T("Account.Logout")</a></li>
        }
        else
        {
            <li><a href="@Url.RouteUrl("Register")" class="ico-register"><i class="fa fa-key"></i> @T("Account.Register")</a></li>
            <li><a href="@Url.RouteUrl("Login")" class="ico-login"><i class="fa fa-lock"></i> @T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                    </a>
            </li>
        }    
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink" class="dropdown cart-full-screen">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart dropdown-toggle">
                    <span class="cart-label"><i class="fa fa-shopping-basket"></i> @T("ShoppingCart")</span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    @*<span class="caret"></span>*@
                </a>

                <ul class="dropdown-menu" role="menu">
                    @await Component.InvokeAsync("FlyoutShoppingCart")
                </ul>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li class="cart-small-screen"><a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">@T("Shoppingcart") <span class="cart-qty"><i class="fa fa-shopping-basket"></i> @T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span></a></li>
        }
        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label"><i class="fa fa-heart"></i> @T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        <li> <div class="header-selectors">
                <div class="taxtype-selector">
                    @await Component.InvokeAsync("TaxTypeSelector")
                </div>
                <div class="currency-selector">
                    @await Component.InvokeAsync("CurrencySelector")
                </div>
                <div class="language-selector">
                    @await Component.InvokeAsync("LanguageSelector")
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" })
            </div>
        </li>
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_links_after" })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script type="text/javascript" asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
</div>
