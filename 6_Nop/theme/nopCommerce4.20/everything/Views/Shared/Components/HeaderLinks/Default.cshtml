@model HeaderLinksModel
@using System.Text.Encodings.Web
<div class="header-links ml-auto">
    <ul class="nav navbar-nav">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
            <li class="nav-item">@await Component.InvokeAsync("AdminHeaderLinks") </li>
             @if (Model.IsAuthenticated)
             {
              <li class="nav-item"><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account"><i class="far fa-user"></i> @T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
              <li class="nav-item"><a href="@Url.RouteUrl("Logout")" class="ico-logout"><i class="fas fa-unlock-alt"></i> @T("Account.Logout")</a></li>
            }
            else
            {
                <li class="nav-item"><a href="@Url.RouteUrl("Register")" class="ico-register"><i class="fas fa-pencil-alt"></i> @T("Account.Register")</a></li>
                <li class="nav-item"><a href="@Url.RouteUrl("Login")" class="ico-login"><i class="fas fa-lock"></i> @T("Account.Login")</a></li>
            }
            @if (Model.AllowPrivateMessages)
            {
                <li class="nav-item">
                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                        <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                        <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                    </a>
                </li>
            }
            @if (Model.WishlistEnabled)
            {
                <li class="nav-item wishlist-desk">
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label"><i class="far fa-heart"></i> @T("Wishlist")</span>
                        <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </a>
                </li>
            }
            @if (Model.ShoppingCartEnabled)
            {
                <li id="topcartlink" class="dropdown topcart cart-full-screen">
                    <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart dropdown-toggle d-none d-md-block" data-toggle="dropdown" data-hover="dropdown">
                        <span class="cart-label"><i class="fas fa-shopping-basket"></i> @T("ShoppingCart")</span>
                        <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                        @*<span class="caret"></span>*@
                    </a>
                    <ul class="dropdown-menu" role="menu">
                        @await Component.InvokeAsync("FlyoutShoppingCart")
                    </ul>
                </li>
            }
            @if (Model.ShoppingCartEnabled)
            {
                <li class="cart-small-screen"><a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart d-md-none"><i class="fas fa-shopping-basket"></i> @T("Shoppingcart") <span class="cart-qty"> @T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span></a></li>
            } 
            <li>
                <div class="header-selectors">
                    @await Component.InvokeAsync("TaxTypeSelector")
                    @await Component.InvokeAsync("CurrencySelector")
                    @await Component.InvokeAsync("LanguageSelector")
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
                </div>
            </li>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
        </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }    
</div>
